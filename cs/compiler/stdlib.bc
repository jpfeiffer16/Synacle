function str_cat(var str_a, var str_b) {
  var a_len = str_len(str_a);
  var b_len = str_len(str_b);
  print_number(a_len);
  out(10);
  print_number(b_len);
  out(10);
  var alloc_ptr = alloc(a_len + b_len);
  breakpoint;
  mem_cp(str_a, alloc_ptr, a_len);

  breakpoint;
  mem_cp(str_b, alloc_ptr + a_len, b_len + 1);
  //print_number(alloc_ptr);
  return alloc_ptr;
}

function input() {
  var data_index = 16384;
  var in_char = in();
  var is_newline = in_char == 10;
  while (!is_newline && in_char) {
    wmem(data_index, in_char);
    ++data_index;
    in_char = in();
    is_newline = in_char == 10;
  }
  wmem(data_index, 0);
  var alloc_ptr = alloc();
  var length = str_len(16384);
  mem_cp(16384, alloc_ptr, length);
  return alloc_ptr;
}

function alloc() {
  var data_index = 0;
  var num_null = 0;
  while(num_null <= 6) {
    var is_null = ~data_index;
    if (!is_null) {
      ++num_null;
    }
    if (is_null) {
      num_null = 0;
    }
    ++data_index;
  }
  --data_index;
  return data_index;
}

function mem_cp(var s_ptr, var d_ptr, var len) {
  var current_byte = 0;
  //print_number(s_ptr);
  //out(10);
  //print_number(d_ptr);
  //out(10);
  //print_number(len);
  //out(10);
  while (current_byte <= len) {
    //print("Looping");
    var byte_to_write_ptr = s_ptr + current_byte;
    var dest_ptr = d_ptr + current_byte;
    wmem(dest_ptr, ~byte_to_write_ptr);
    //out(10);
    //print_number(d_ptr + current_byte);
    //out(10);
    //print_number(~byte_to_write_ptr);
    ++current_byte;
  }
}

function str_len(var str_ptr) {
  var length = 0;
  while(~str_ptr) {
    ++str_ptr;
    ++length;
  }
  return length;
}

function println(var str_ptr) {
  print(str_ptr);
  out(10);
}

function print(var str_ptr) {
  while (~str_ptr) {
    out(~str_ptr);
    ++str_ptr;
  }
}

function print_number(var num) {
  if (num == 10) {
    out(49);
    out(48);
    return;
  }
  var charNum;
  var length = 0;
  while (num > 10) {
    charNum = num % 10;
    push(charNum);
    ++length;
    num = num / 10;
  }
  charNum = num % 10;
  push(charNum);
  ++length;

  //Clean up the stack and output number
  var stackIndex = 0;

  while(stackIndex < length) {
    stackIndex = stackIndex + 1;
    out(pop() + 48);
  }
}

function dump_mem() {
  var i = 0;

  while (~i) {
    ++i;
    print_number(~i);
    out(10);
  }
}