#include "../lib/stdlib.bc"
#include "../lib/testlib.bc"


category("str_len tests", () => {
    var result = 0;
    before_each(() => result = str_len("123"));

    test("string length should be 3", () =>
        assert(is(result)->equal_to(3))
    );
});

category("str_equal tests", () => {
    test("string should be equal" () => {
        var result = str_equal("123", "123");
        assert(is(result)->equal_to(1));
    });

    test("string not should be equal" () => {
        var result = str_equal("23", "123");
        assert(is(result)->equal_to(0));
    });
});

category("alloc tests", () => {
    test("returned pointer is not 0", () =>
        assert(is(alloc())->greater_than(0))
    );
});

category("alloc_chunk tests", () => {
    test("returned pointer is not 0", () =>
        assert(is(alloc_chunk(5))->greater_than(0))
    );
});

category("mem_cp tests", () => {
    var string_to_copy = "Test";
    ptr string_ptr = alloc();
    mem_cp(string_to_copy as ptr, string_ptr, str_len(string_to_copy));
    test("strings should be equal", () =>
        assert(str_equal(string_to_copy, string_ptr as string))
    );
});

category("str_cat tests", () => {
    test("strings should be concatinated", () =>
        assert(str_equal(str_cat("123", "456"), "123456"))
    );
});

category("flip_str tests", () => {
    test("string should be fliped", () =>
        assert(str_equal(flip_str("123"), "321"))
    );
});

category("int tests", () => {
    test("string should be converted to an int", () =>
        assert(is(int("123"))->equal_to(123))
    );
});

category("string tests", () => {
    test("int should be converted to a string", () =>
        assert(str_equal(string(123), "123"))
    );
});
