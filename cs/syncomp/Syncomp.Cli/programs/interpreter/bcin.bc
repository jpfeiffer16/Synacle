#include "../shell.bc"
#include "../lib/array_wrapper.bc"

type codes
{
    int HALT,
    int SET,
    int PUSH,
    int POP,
    int EQ,
    int GT,
    int JMP,
    int JT,
    int JF,
    int ADD,
    int MULT,
    int MOD,
    int AND,
    int OR,
    int NOT,
    int RMEM,
    int WMEM,
    int CALL,
    int RET,
    int OUT,
    int IN,
    int NOOP
};

codes opcodes;
opcodes.HALT = 0;
opcodes.SET = 1;
opcodes.PUSH = 2;
opcodes.POP = 3;
opcodes.EQ = 4;
opcodes.GT = 5;
opcodes.JMP = 6;
opcodes.JT = 7;
opcodes.JF = 8;
opcodes.ADD = 9;
opcodes.MULT = 10;
opcodes.MOD = 11;
opcodes.AND = 12;
opcodes.OR = 13;
opcodes.NOT = 14;
opcodes.RMEM = 15;
opcodes.WMEM = 16;
opcodes.CALL = 17;
opcodes.RET = 18;
opcodes.OUT = 19;
opcodes.IN = 20;
opcodes.NOOP = 21;

type takeresult
{
    int p_counter,
    ptr<array> items
};

function take(string op_name, int num, int p_counter) : ptr<takeresult>
{
    print(op_name);
    print(" ");
    takeresult r; ptr<takeresult> result = &r;
    ptr<array> take_array = array_new(3);
    for (int i = 0; i < num; ++i)
    {
        ++p_counter;
        print_number(~p_counter as int);
        print(" ");
        array_set_nth(take_array, i, ~p_counter as int);
    }
    println(" ");
    result->p_counter = p_counter;
    result->items = take_array;
    return result;
}

func<void> entrypoint = function()
{
    println("Hello, world!");
};


int p_counter = entrypoint as int;
for (; p_counter < 32767; ++p_counter) {
    int op = ~p_counter as int;
    if (op == opcodes.HALT) {
        ptr<takeresult> result = take("HALT", 0, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.SET) {
        ptr<takeresult> result = take("SET", 2, p_counter);
        p_counter = result->p_counter;
        array_get_nth(result->items, 0);
        breakpoint;
        array_get_nth(result->items, 1);
        breakpoint;
    }
    if (op == opcodes.PUSH) {
        ptr<takeresult> result = take("PUSH", 1, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.POP) {
        ptr<takeresult> result = take("POP", 1, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.EQ) {
        ptr<takeresult> result = take("EQ", 3, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.GT) {
        ptr<takeresult> result = take("GT", 3, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.JMP) {
        ptr<takeresult> result = take("JMP", 1, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.JT) {
        ptr<takeresult> result = take("JT", 2, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.JF) {
        ptr<takeresult> result = take("JF", 2, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.ADD) {
        ptr<takeresult> result = take("ADD", 3, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.MULT) {
        ptr<takeresult> result = take("MULT", 3, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.MOD) {
        ptr<takeresult> result = take("MOD", 3, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.AND) {
        ptr<takeresult> result = take("AND", 3, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.OR) {
        ptr<takeresult> result = take("OR", 3, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.NOT) {
        ptr<takeresult> result = take("NOT", 2, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.RMEM) {
        ptr<takeresult> result = take("RMEM", 2, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.WMEM) {
        ptr<takeresult> result = take("WMEM", 2, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.CALL) {
        ptr<takeresult> result = take("CALL", 1, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.RET) {
        ptr<takeresult> result = take("RET", 0, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.OUT) {
        ptr<takeresult> result = take("OUT", 1, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.IN) {
        ptr<takeresult> result = take("IN", 1, p_counter);
        p_counter = result->p_counter;
    }
    if (op == opcodes.NOOP) {
        ptr<takeresult> result = take("NOOP", 0, p_counter);
        p_counter = result->p_counter;
    }
}
