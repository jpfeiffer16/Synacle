#include "./stdlib.bc"
#include "./bool.bc"

string current_category;
string current_test;
func<void> current_before_each = () => {};
func<void> current_after_each = () => {};

function category(string name, func<void> cat_func)
{
    println(name);
    current_category = name;
    cat_func();
}

var before_each = (func<void> before_each_func) =>
    current_before_each = before_each_func;

function after_each(func<void> after_each)
{
    current_after_each = current_after_each;
}

function test(string name, func<void> test_func)
{
    current_test = name;
    test_func();
}

function assert(void fact) {
    print("\t");
    print(str_cat(current_test, " : "));
    if (!(fact == 1))
    {
        println("FAILED");
        return false;
    }
    println("PASSED");
    return true;
}

type assert_type
{
    void left,
    func<void, bool> equal_to,
    func<void, bool> greater_than,
    func<void, bool> less_than
}


function assert_type_factory(void left) : ptr<assert_type>
{
    ptr<assert_type> &a_type;
    a_type->left = left;
    a_type->equal_to = (void right) : bool =>
    {
        var result = left == right;
        return result as bool;
    };
    return a_type;
}

function is(void left) : ptr<assert_type>
{
    return assert_type_factory(left);
}
