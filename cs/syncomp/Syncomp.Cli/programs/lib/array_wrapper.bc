#include "stdlib.bc"
#include "error.bc"

string INDEX_OUT_OF_BOUNDS_MESSAGE = "Index outside of the bounds of array";

// Placeholder type for an array of int
type array { };

function array_length(ptr<array> ptr) : int
{
    int length = 0;
    int value = (*(ptr + length));
    while (!(value == 32767))
    {
        ++length;
        value = (*(ptr + length));
    }
    return length;
}

function array_new(int length) : ptr<array>
{
    var alloc_ptr = alloc_chunk(length);
    return alloc_ptr as ptr<array>;
}

function array_get_nth(ptr<array> ptr, int index): int
{
    int length = array_length(ptr);
    if (index >= length)
    {
        throw(INDEX_OUT_OF_BOUNDS_MESSAGE);
    }
    int return_value = *(ptr + index);
    return return_value;
}

function array_set_nth(ptr<array> ptr, int index, int value)
{
    int length = array_length(ptr);
    if (index >= length)
    {
        throw(INDEX_OUT_OF_BOUNDS_MESSAGE);
    }
    wmem((ptr + index) as ptr, value);
}


function array_foreach(ptr<array> ptr, func<ptr, int, void> cb)
{
    int length = array_length(ptr);
    for (int i = 0; i < length; ++i)
    {
        cb((ptr + i) as ptr, i);
    }
}

function array_map(ptr<array> ptr, func<int, int> cb) : ptr<array>
{
    int length = array_length(ptr);
    ptr<array> new_array = alloc_chunk(length) as ptr<array>;
    for (int i = 0; i < length; ++i)
    {
        int value = array_get_nth(ptr, i);
        int new_value = cb(value);
        array_set_nth(new_array, i, new_value);
    }
    return new_array;
}
